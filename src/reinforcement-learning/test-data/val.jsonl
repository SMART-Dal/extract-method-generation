{"Smelly Sample":"    private void doStart() {\n        formatter = DateTimeFormat.forPattern(timeFormat).withZone(DateTimeZone.forID(timeZone));\n        producerConfig.userAgent = \"logback\";\n        producer = new LogProducer(producerConfig);\n        producer.setProjectConfig(projectConfig);\n\n        super.start();\n    }\n","Method after Refactoring":"    private void doStart() {\n        formatter = DateTimeFormat.forPattern(timeFormat).withZone(DateTimeZone.forID(timeZone));\n        producer = createProducer();\n        super.start();\n    }\n","Extracted Method":"    public Producer createProducer() {\n        projectConfig = buildProjectConfig();\n        producerConfig.getProjectConfigs().put(projectConfig);\n        return new LogProducer(producerConfig);\n    }\n"}
{"Smelly Sample":"    @Override\n    public void start() {\n        formatter = new SimpleDateFormat(timeFormat);\n        formatter.setTimeZone(TimeZone.getTimeZone(timeZone));\n\n        producer = new LogProducer(producerConfig);\n        producer.setProjectConfig(projectConfig);\n\n        super.start();\n    }\n","Method after Refactoring":"    @Override\n    public void start() {\n        try {\n            doStart();\n        } catch (Exception e) {\n            addError(\"Failed to start LoghubAppender.\", e);\n        }\n    }\n","Extracted Method":"    private void doStart() {\n        formatter = new SimpleDateFormat(timeFormat);\n        formatter.setTimeZone(TimeZone.getTimeZone(timeZone));\n\n        producer = new LogProducer(producerConfig);\n        producer.setProjectConfig(projectConfig);\n\n        super.start();\n    }\n"}
{"Smelly Sample":"    @Override\n    public void stop() {\n        if (!isStarted())\n            return;\n\n        super.stop();\n        try {\n            producer.flush();\n            Thread.sleep(2 * producerConfig.packageTimeoutInMS);\n            producer.close();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n","Method after Refactoring":"    @Override\n    public void stop() {\n        try {\n            doStop();\n        } catch (Exception e) {\n            addError(\"Failed to stop LoghubAppender.\", e);\n        }\n    }\n","Extracted Method":"    private void doStop() throws InterruptedException {\n        if (!isStarted())\n            return;\n\n        super.stop();\n        producer.flush();\n        Thread.sleep(2 * producerConfig.packageTimeoutInMS);\n        producer.close();\n    }\n"}
{"Smelly Sample":"    @Override\n    public void append(E eventObject) {\n        //init Event Object\n        if (!(eventObject instanceof LoggingEvent)) {\n            return;\n        }\n        LoggingEvent event = (LoggingEvent) eventObject;\n\n        List<LogItem> logItems = new ArrayList<LogItem>();\n        LogItem item = new LogItem();\n        logItems.add(item);\n        item.SetTime((int) (event.getTimeStamp() / 1000));\n        //item.PushBack(\"time\", formatter.format(new Date(event.getTimeStamp())));\n        item.PushBack(\"level\", event.getLevel().toString());\n        item.PushBack(\"thread\", event.getThreadName());\n\n        StackTraceElement[] caller = event.getCallerData();\n        if (caller != null || caller.length > 0) {\n            item.PushBack(\"location\", caller[0].toString());\n        }\n\n        item.PushBack(\"message\", event.getFormattedMessage());\n        if (event.getThrowableProxy() != null) {\n            item.PushBack(\"exception\", fullDump(event.getThrowableProxy().getStackTraceElementProxyArray()));\n        }\n\n        producer.send(projectConfig.projectName, logstore, topic, null, logItems);\n    }\n","Method after Refactoring":"    @Override\n    public void append(E eventObject) {\n        try {\n            appendEvent(eventObject);\n        } catch (Exception e) {\n            addError(\"Failed to append event.\", e);\n        }\n    }\n","Extracted Method":"    private void appendEvent(E eventObject) {\n        //init Event Object\n        if (!(eventObject instanceof LoggingEvent)) {\n            return;\n        }\n        LoggingEvent event = (LoggingEvent) eventObject;\n\n        List<LogItem> logItems = new ArrayList<LogItem>();\n        LogItem item = new LogItem();\n        logItems.add(item);\n        item.SetTime((int) (event.getTimeStamp() / 1000));\n        //item.PushBack(\"time\", formatter.format(new Date(event.getTimeStamp())));\n        item.PushBack(\"level\", event.getLevel().toString());\n        item.PushBack(\"thread\", event.getThreadName());\n\n        StackTraceElement[] caller = event.getCallerData();\n        if (caller != null || caller.length > 0) {\n            item.PushBack(\"location\", caller[0].toString());\n        }\n\n        item.PushBack(\"message\", event.getFormattedMessage());\n        if (event.getThrowableProxy() != null) {\n            item.PushBack(\"exception\", fullDump(event.getThrowableProxy().getStackTraceElementProxyArray()));\n        }\n\n        producer.send(projectConfig.projectName, logstore, topic, null, logItems);\n    }\n"}
