{"Smelly Sample":"\tprotected void putData(final String data, final CommandLine cmdLine) throws IOException,\n\t\t\tJMSException, ScriptException {\n\t\t// Check if we have properties to put\n\t\tProperties props = cmdLine.getOptionProperties(CMD_SET_HEADER);\n\t\tProperties intProps = cmdLine.getOptionProperties(CMD_SET_INT_HEADER);\n\t\tProperties longProps = cmdLine.getOptionProperties(CMD_SET_LONG_HEADER);\n        Properties booleanProps = cmdLine.getOptionProperties(CMD_SET_BOOLEAN_HEADER);\n\n\t\tString type = cmdLine.getOptionValue(CMD_TYPE, DEFAULT_TYPE);\n\t\tString encoding = cmdLine.getOptionValue(CMD_ENCODING, Charset\n\t\t\t\t.defaultCharset().name());\n\n\t\tMessage outMsg = null;\n\t\t// figure out input data\n\t\tif (data.startsWith(\"@\")) {\n\t\t\toutMsg = createMessageFromFile(data, type, encoding);\n\t\t} else {\n\t\t\toutMsg = createMessageFromInput(data, type, encoding);\n\t\t}\n\n\t\tMessageProducer mp = sess.createProducer(createDestination(cmdLine\n\t\t\t\t.getArgs()[0]));\n\t\tif (cmdLine.hasOption(\"n\")) {\n\t\t\tmp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n\t\t}\n\n\t\t// enrich headers.\n\t\tfor (Entry<Object, Object> p : props.entrySet()) {\n\t\t\toutMsg.setObjectProperty((String) p.getKey(), p.getValue());\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : intProps.entrySet()) {\n\t\t\toutMsg.setIntProperty((String) p.getKey(), Integer.parseInt((String)p.getValue()));\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : longProps.entrySet()) {\n\t\t\toutMsg.setLongProperty((String) p.getKey(), Long.parseLong((String)p.getValue()));\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : booleanProps.entrySet()) {\n\t\t\toutMsg.setBooleanProperty((String) p.getKey(), Boolean.parseBoolean((String)p.getValue()));\n\t\t}\n\n\t\tif (cmdLine.hasOption(\"r\")) {\n\t\t\toutMsg.setJMSReplyTo(createDestination(cmdLine.getOptionValue(\"r\")));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_CORRELATION_ID)) {\n\t\t\toutMsg.setJMSCorrelationID(cmdLine.getOptionValue(CMD_CORRELATION_ID));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_PRIORITY)) {\n\t\t\ttry {\n\t\t\t\tint priority = Integer.parseInt(cmdLine\n\t\t\t\t\t\t.getOptionValue(CMD_PRIORITY));\n\t\t\t\tmp.setPriority(priority);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\t\"JMSPriority has to be an integer value\");\n\t\t\t}\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_TTL)) {\n\t\t\ttry {\n\t\t\t\tlong ttl = Long.parseLong(cmdLine\n\t\t\t\t\t\t.getOptionValue(CMD_TTL));\n\t\t\t\tmp.setTimeToLive(ttl);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\t\"JMSExpiry has to be a long value\");\n\t\t\t}\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_JMS_TYPE)) {\n\t\t\toutMsg.setJMSType(cmdLine.getOptionValue(CMD_JMS_TYPE));\n\t\t}\n\t\t\n\t\tboolean useScript = cmdLine.hasOption(CMD_TRANSFORM_SCRIPT);\n\t\tfinal String script = cmdLine.getOptionValue(CMD_TRANSFORM_SCRIPT);\n\t\t\n\t\t// send multiple messages?\n\t\tif (cmdLine.hasOption(\"c\")) {\n\t\t\tint count = Integer.parseInt(cmdLine.getOptionValue(\"c\"));\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\tfinal Message finalMsg = useScript ? transformMessage(outMsg, script) : outMsg;\n\t\t\t\tmp.send(finalMsg);\n\t\t\t}\n\t\t\toutput(\"\", count, \" messages sent\");\n\t\t} else if (cmdLine.hasOption(CMD_BATCH_FILE)) {\n\t\t\tif (!useScript) {\n\t\t\t\toutput(\"Batch put must be used with script\");\n\t\t\t} else {\n\t\t\t\tputBatchMessage(script, cmdLine.getOptionValue(CMD_BATCH_FILE), outMsg, mp);\n\t\t\t}\n\t\t} else {\n\t\t\tfinal Message finalMsg = useScript ? transformMessage(outMsg, script) : outMsg;\n\t\t\tmp.send(finalMsg);\n\t\t}\n\t}\n","Method after Refactoring":"\tprotected void putData(final String data, final CommandLine cmdLine) throws IOException,\n\t\t\tJMSException, ScriptException {\n\t\t// Check if we have properties to put\n\t\tProperties props = cmdLine.getOptionProperties(CMD_SET_HEADER);\n\t\tProperties intProps = cmdLine.getOptionProperties(CMD_SET_INT_HEADER);\n\t\tProperties longProps = cmdLine.getOptionProperties(CMD_SET_LONG_HEADER);\n        Properties booleanProps = cmdLine.getOptionProperties(CMD_SET_BOOLEAN_HEADER);\n\n\t\tString type = cmdLine.getOptionValue(CMD_TYPE, DEFAULT_TYPE);\n\t\tString encoding = cmdLine.getOptionValue(CMD_ENCODING, Charset\n\t\t\t\t.defaultCharset().name());\n\n\t\tMessage outMsg = null;\n\t\t// figure out input data\n\t\tif (data.startsWith(\"@\")) {\n\t\t\toutMsg = createMessageFromFile(data, type, encoding);\n\t\t} else {\n\t\t\toutMsg = createMessageFromInput(data, type, encoding);\n\t\t}\n\n\t\tMessageProducer mp = sess.createProducer(createDestination(cmdLine\n\t\t\t\t.getArgs()[0]));\n\t\tif (cmdLine.hasOption(\"n\")) {\n\t\t\tmp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n\t\t}\n\n\t\t// enrich headers.\n\t\tfor (Entry<Object, Object> p : props.entrySet()) {\n\t\t\toutMsg.setObjectProperty((String) p.getKey(), p.getValue());\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : intProps.entrySet()) {\n\t\t\toutMsg.setIntProperty((String) p.getKey(), Integer.parseInt((String)p.getValue()));\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : longProps.entrySet()) {\n\t\t\toutMsg.setLongProperty((String) p.getKey(), Long.parseLong((String)p.getValue()));\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : booleanProps.entrySet()) {\n\t\t\toutMsg.setBooleanProperty((String) p.getKey(), Boolean.parseBoolean((String)p.getValue()));\n\t\t}\n\n\t\tpopulateJmsProperties(outMsg, mp);\n\n\t\tboolean useScript = cmdLine.hasOption(CMD_TRANSFORM_SCRIPT);\n\t\tfinal String script = cmdLine.getOptionValue(CMD_TRANSFORM_SCRIPT);\n\t\t\n\t\t// send multiple messages?\n\t\tif (cmdLine.hasOption(\"c\")) {\n\t\t\tint count = Integer.parseInt(cmdLine.getOptionValue(\"c\"));\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\tfinal Message finalMsg = useScript ? transformMessage(outMsg, script) : outMsg;\n\t\t\t\tmp.send(finalMsg);\n\t\t\t}\n\t\t\toutput(\"\", count, \" messages sent\");\n\t\t} else if (cmdLine.hasOption(CMD_BATCH_FILE)) {\n\t\t\tif (!useScript) {\n\t\t\t\toutput(\"Batch put must be used with script\");\n\t\t\t} else {\n\t\t\t\tputBatchMessage(script, cmdLine.getOptionValue(CMD_BATCH_FILE), outMsg, mp);\n\t\t\t}\n\t\t} else {\n\t\t\tfinal Message finalMsg = useScript ? transformMessage(outMsg, script) : outMsg;\n\t\t\tmp.send(finalMsg);\n\t\t}\n\t}\n","Extracted Method":"\tprivate void populateJmsProperties(Message outMsg, MessageProducer mp) throws JMSException {\n\t\tif (cmdLine.hasOption(\"r\")) {\n\t\t\toutMsg.setJMSReplyTo(createDestination(cmdLine.getOptionValue(\"r\")));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_CORRELATION_ID)) {\n\t\t\toutMsg.setJMSCorrelationID(cmdLine.getOptionValue(CMD_CORRELATION_ID));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_PRIORITY)) {\n\t\t\ttry {\n\t\t\t\tint priority = Integer.parseInt(cmdLine\n\t\t\t\t\t\t.getOptionValue(CMD_PRIORITY));\n\t\t\t\tmp.setPriority(priority);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\t\"JMSPriority has to be an integer value\");\n\t\t\t}\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_TTL)) {\n\t\t\ttry {\n\t\t\t\tlong ttl = Long.parseLong(cmdLine\n\t\t\t\t\t\t.getOptionValue(CMD_TTL));\n\t\t\t\tmp.setTimeToLive(ttl);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\t\"JMSExpiry has to be a long value\");\n\t\t\t}\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_JMS_TYPE)) {\n\t\t\toutMsg.setJMSType(cmdLine.getOptionValue(CMD_JMS_TYPE));\n\t\t}\n\t}\n"}
{"Smelly Sample":"\tprotected void executeMove(CommandLine cmdLine) throws JMSException,\n\t\t\tUnsupportedEncodingException, IOException {\n\t\t\n\t\t// Should be able to support some kind of Move operation even though the session is not transacted.\n\t\tboolean hasTransactionalSession = tsess != null;\n\t\tSession moveSession = hasTransactionalSession ? tsess : sess;\n\t\t\n\t\tQueue tq = moveSession.createQueue(cmdLine.getArgs()[0]);\n\t\tQueue q = moveSession.createQueue(cmdLine.getOptionValue(CMD_MOVE_QUEUE)); // Source\n\n\t\tMessageConsumer mq = null;\n\t\tMessageProducer mp = moveSession.createProducer(tq);\n\t\tif (cmdLine.hasOption(CMD_SELECTOR)) { // Selectors\n\t\t\tmq = moveSession.createConsumer(q, cmdLine.getOptionValue(CMD_SELECTOR));\n\t\t} else {\n\t\t\tmq = moveSession.createConsumer(q);\n\t\t}\n\t\tint count = Integer.parseInt(cmdLine.getOptionValue(CMD_COUNT,\n\t\t\t\tDEFAULT_COUNT_ALL));\n\t\tint j = 0;\n\t\twhile (j < count || count == 0) {\n\t\t\tMessage msg = mq.receive(100L);\n\t\t\tif (msg == null) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tmp.send(msg);\n\t\t\t\tif( hasTransactionalSession ){\n\t\t\t\t\tmoveSession.commit();\n\t\t\t\t}\n\t\t\t\t++j;\n\t\t\t}\n\t\t}\n\t\toutput(j, \" msgs moved from \", cmdLine.getOptionValue(CMD_MOVE_QUEUE),\n\t\t\t\t\" to \", cmdLine.getArgs()[0]);\n\t}\n","Method after Refactoring":"\tprotected void executeMove(CommandLine cmdLine) throws JMSException,\n\t\t\tUnsupportedEncodingException, ScriptException, IOException {\n\t\t\n\t\t// Should be able to support some kind of Move operation even though the session is not transacted.\n\t\tboolean hasTransactionalSession = tsess != null;\n\t\tSession moveSession = hasTransactionalSession ? tsess : sess;\n\t\t\n\t\tQueue tq = moveSession.createQueue(cmdLine.getArgs()[0]);\n\t\tQueue q = moveSession.createQueue(cmdLine.getOptionValue(CMD_MOVE_QUEUE)); // Source\n\n\t\tMessageConsumer mq = null;\n\t\tMessageProducer mp = moveSession.createProducer(tq);\n\t\tif (cmdLine.hasOption(CMD_SELECTOR)) { // Selectors\n\t\t\tmq = moveSession.createConsumer(q, cmdLine.getOptionValue(CMD_SELECTOR));\n\t\t} else {\n\t\t\tmq = moveSession.createConsumer(q);\n\t\t}\n\t\tint count = Integer.parseInt(cmdLine.getOptionValue(CMD_COUNT,\n\t\t\t\tDEFAULT_COUNT_ALL));\n\t\tint j = 0;\n\t\twhile (j < count || count == 0) {\n\t\t\tMessage msg = mq.receive(100L);\n\t\t\tif (msg == null) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tsendWithOptionalTransformer(cmdLine, msg, mp);\n\t\t\t\tif( hasTransactionalSession ){\n\t\t\t\t\tmoveSession.commit();\n\t\t\t\t}\n\t\t\t\t++j;\n\t\t\t}\n\t\t}\n\t\toutput(j, \" msgs moved from \", cmdLine.getOptionValue(CMD_MOVE_QUEUE),\n\t\t\t\t\" to \", cmdLine.getArgs()[0]);\n\t}\n","Extracted Method":"\tprotected void sendWithOptionalTransformer(CommandLine cmdLine, Message msg, MessageProducer mp) throws JMSException, ScriptException, IOException {\n\t\tif( cmdLine.hasOption(CMD_TRANSFORM_SCRIPT) ) {\n\t\t\tmp.send(transformMessage(msg, cmdLine.getOptionValue(CMD_TRANSFORM_SCRIPT)));\n\t\t} else {\n\t\t\tmp.send(msg);\n\t\t}\n\n\t}\n"}
{"Smelly Sample":"\tprotected void executeCopy(CommandLine cmdLine) throws JMSException, ScriptException, IOException {\n\t\tQueue tq = sess.createQueue(cmdLine.getArgs()[0]);\n\t\tQueue q = sess.createQueue(cmdLine.getOptionValue(CMD_COPY_QUEUE)); // Source\n\t\tQueueBrowser qb = null;\n\t\tMessageProducer mp = sess.createProducer(tq);\n\t\tif (cmdLine.hasOption(CMD_SELECTOR)) { // Selectors\n\t\t\tqb = sess.createBrowser(q, cmdLine.getOptionValue(CMD_SELECTOR));\n\t\t} else {\n\t\t\tqb = sess.createBrowser(q);\n\t\t}\n\t\tint count = Integer.parseInt(cmdLine.getOptionValue(CMD_COUNT,\n\t\t\t\tDEFAULT_COUNT_ALL));\n\t\tint i = 0, j = 0;\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tEnumeration<Message> en = qb.getEnumeration();\n\t\twhile ((i < count || count == 0) && en.hasMoreElements()) {\n\t\t\tMessage msg = en.nextElement();\n\t\t\tif (msg == null) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// if search is enabled\n\t\t\t\tif (cmdLine.hasOption(CMD_FIND)) {\n\t\t\t\t\tif (msg instanceof TextMessage) {\n\t\t\t\t\t\tString haystack = ((TextMessage) msg).getText();\n\t\t\t\t\t\tString needle = cmdLine.getOptionValue(CMD_FIND);\n\t\t\t\t\t\tif (haystack != null && haystack.contains(needle)) {\n\t\t\t\t\t\t\tif( cmdLine.hasOption(CMD_TRANSFORM_SCRIPT) ) {\n\t\t\t\t\t\t\t\tmp.send(transformMessage(msg,cmdLine.getOptionValue(CMD_TRANSFORM_SCRIPT)));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmp.send(msg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t++j;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmp.send(msg);\n\t\t\t\t\t++j;\n\t\t\t\t}\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t\toutput(j, \" msgs copied from \", cmdLine.getOptionValue(CMD_COPY_QUEUE),\n\t\t\t\t\" to \", cmdLine.getArgs()[0]);\n\t}\n","Method after Refactoring":"\tprotected void executeCopy(CommandLine cmdLine) throws JMSException, ScriptException, IOException {\n\t\tQueue tq = sess.createQueue(cmdLine.getArgs()[0]);\n\t\tQueue q = sess.createQueue(cmdLine.getOptionValue(CMD_COPY_QUEUE)); // Source\n\t\tQueueBrowser qb = null;\n\t\tMessageProducer mp = sess.createProducer(tq);\n\t\tif (cmdLine.hasOption(CMD_SELECTOR)) { // Selectors\n\t\t\tqb = sess.createBrowser(q, cmdLine.getOptionValue(CMD_SELECTOR));\n\t\t} else {\n\t\t\tqb = sess.createBrowser(q);\n\t\t}\n\t\tint count = Integer.parseInt(cmdLine.getOptionValue(CMD_COUNT,\n\t\t\t\tDEFAULT_COUNT_ALL));\n\t\tint i = 0, j = 0;\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tEnumeration<Message> en = qb.getEnumeration();\n\t\twhile ((i < count || count == 0) && en.hasMoreElements()) {\n\t\t\tMessage msg = en.nextElement();\n\t\t\tif (msg == null) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// if search is enabled\n\t\t\t\tif (cmdLine.hasOption(CMD_FIND)) {\n\t\t\t\t\tif (msg instanceof TextMessage) {\n\t\t\t\t\t\tString haystack = ((TextMessage) msg).getText();\n\t\t\t\t\t\tString needle = cmdLine.getOptionValue(CMD_FIND);\n\t\t\t\t\t\tif (haystack != null && haystack.contains(needle)) {\n\t\t\t\t\t\t\tsendWithOptionalTransformer(cmdLine, msg, mp);\n\t\t\t\t\t\t\t++j;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsendWithOptionalTransformer(cmdLine, msg, mp);\n\t\t\t\t\t++j;\n\t\t\t\t}\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t\toutput(j, \" msgs copied from \", cmdLine.getOptionValue(CMD_COPY_QUEUE),\n\t\t\t\t\" to \", cmdLine.getArgs()[0]);\n\t}\n","Extracted Method":"\tprotected void sendWithOptionalTransformer(CommandLine cmdLine, Message msg, MessageProducer mp) throws JMSException, ScriptException, IOException {\n\t\tif( cmdLine.hasOption(CMD_TRANSFORM_SCRIPT) ) {\n\t\t\tmp.send(transformMessage(msg, cmdLine.getOptionValue(CMD_TRANSFORM_SCRIPT)));\n\t\t} else {\n\t\t\tmp.send(msg);\n\t\t}\n\n\t}\n"}
{"Smelly Sample":"\tprotected void executeCopy(CommandLine cmdLine) throws JMSException, ScriptException, IOException {\n\t\tQueue tq = sess.createQueue(cmdLine.getArgs()[0]);\n\t\tQueue q = sess.createQueue(cmdLine.getOptionValue(CMD_COPY_QUEUE)); // Source\n\t\tQueueBrowser qb = null;\n\t\tMessageProducer mp = sess.createProducer(tq);\n\t\tif (cmdLine.hasOption(CMD_SELECTOR)) { // Selectors\n\t\t\tqb = sess.createBrowser(q, cmdLine.getOptionValue(CMD_SELECTOR));\n\t\t} else {\n\t\t\tqb = sess.createBrowser(q);\n\t\t}\n\t\tint count = Integer.parseInt(cmdLine.getOptionValue(CMD_COUNT,\n\t\t\t\tDEFAULT_COUNT_ALL));\n\t\tint i = 0, j = 0;\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tEnumeration<Message> en = qb.getEnumeration();\n\t\twhile ((i < count || count == 0) && en.hasMoreElements()) {\n\t\t\tMessage msg = en.nextElement();\n\t\t\tif (msg == null) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// if search is enabled\n\t\t\t\tif (cmdLine.hasOption(CMD_FIND)) {\n\t\t\t\t\tif (msg instanceof TextMessage) {\n\t\t\t\t\t\tString haystack = ((TextMessage) msg).getText();\n\t\t\t\t\t\tString needle = cmdLine.getOptionValue(CMD_FIND);\n\t\t\t\t\t\tif (haystack != null && haystack.contains(needle)) {\n\t\t\t\t\t\t\tif( cmdLine.hasOption(CMD_TRANSFORM_SCRIPT) ) {\n\t\t\t\t\t\t\t\tmp.send(transformMessage(msg,cmdLine.getOptionValue(CMD_TRANSFORM_SCRIPT)));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmp.send(msg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t++j;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmp.send(msg);\n\t\t\t\t\t++j;\n\t\t\t\t}\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t\toutput(j, \" msgs copied from \", cmdLine.getOptionValue(CMD_COPY_QUEUE),\n\t\t\t\t\" to \", cmdLine.getArgs()[0]);\n\t}\n","Method after Refactoring":"\tprotected void executeCopy(CommandLine cmdLine) throws JMSException, ScriptException, IOException {\n\t\tQueue tq = sess.createQueue(cmdLine.getArgs()[0]);\n\t\tQueue q = sess.createQueue(cmdLine.getOptionValue(CMD_COPY_QUEUE)); // Source\n\t\tQueueBrowser qb = null;\n\t\tMessageProducer mp = sess.createProducer(tq);\n\t\tif (cmdLine.hasOption(CMD_SELECTOR)) { // Selectors\n\t\t\tqb = sess.createBrowser(q, cmdLine.getOptionValue(CMD_SELECTOR));\n\t\t} else {\n\t\t\tqb = sess.createBrowser(q);\n\t\t}\n\t\tint count = Integer.parseInt(cmdLine.getOptionValue(CMD_COUNT,\n\t\t\t\tDEFAULT_COUNT_ALL));\n\t\tint i = 0, j = 0;\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tEnumeration<Message> en = qb.getEnumeration();\n\t\twhile ((i < count || count == 0) && en.hasMoreElements()) {\n\t\t\tMessage msg = en.nextElement();\n\t\t\tif (msg == null) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// if search is enabled\n\t\t\t\tif (cmdLine.hasOption(CMD_FIND)) {\n\t\t\t\t\tif (msg instanceof TextMessage) {\n\t\t\t\t\t\tString haystack = ((TextMessage) msg).getText();\n\t\t\t\t\t\tString needle = cmdLine.getOptionValue(CMD_FIND);\n\t\t\t\t\t\tif (haystack != null && haystack.contains(needle)) {\n\t\t\t\t\t\t\tsendWithOptionalTransformer(cmdLine, msg, mp);\n\t\t\t\t\t\t\t++j;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsendWithOptionalTransformer(cmdLine, msg, mp);\n\t\t\t\t\t++j;\n\t\t\t\t}\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t\toutput(j, \" msgs copied from \", cmdLine.getOptionValue(CMD_COPY_QUEUE),\n\t\t\t\t\" to \", cmdLine.getArgs()[0]);\n\t}\n","Extracted Method":"\tprotected void sendWithOptionalTransformer(CommandLine cmdLine, Message msg, MessageProducer mp) throws JMSException, ScriptException, IOException {\n\t\tif( cmdLine.hasOption(CMD_TRANSFORM_SCRIPT) ) {\n\t\t\tmp.send(transformMessage(msg, cmdLine.getOptionValue(CMD_TRANSFORM_SCRIPT)));\n\t\t} else {\n\t\t\tmp.send(msg);\n\t\t}\n\n\t}\n"}
{"Smelly Sample":"\tpublic void run(String[] args) throws InterruptedException {\n\t\tOptions opts = new Options();\n\t\topts.addOption(CMD_BROKER, \"broker\", true,\n\t\t\t\t\"URL to broker. defaults to: tcp://localhost:61616\");\n\t\topts.addOption(CMD_GET, \"get\", false, \"Get a message from destination\");\n\t\topts.addOption(CMD_PUT, \"put\", true,\n\t\t\t\t\"Put a message. Specify data. if starts with @, a file is assumed and loaded\");\n\t\topts.addOption(CMD_TYPE, \"type\", true,\n\t\t\t\t\"Message type to put, [bytes, text, map] - defaults to text\");\n\t\topts.addOption(CMD_ENCODING, \"encoding\", true,\n\t\t\t\t\"Encoding of input file data. Default UTF-8\");\n\t\topts.addOption(CMD_NON_PERSISTENT, \"non-persistent\", false,\n\t\t\t\t\"Set message to non persistent.\");\n\t\topts.addOption(CMD_REPLY_TO, \"reply-to\", true,\n\t\t\t\t\"Set reply to destination, i.e. queue:reply\");\n\t\topts.addOption(CMD_CORRELATION_ID, \"correlation-id\", true,\n\t\t\t\t\"Set CorrelationID\");\n\t\topts.addOption(\n\t\t\t\tCMD_OUTPUT,\n\t\t\t\t\"output\",\n\t\t\t\ttrue,\n\t\t\t\t\"file to write payload to. If multiple messages, a -1.<ext> will be added to the file. BytesMessage will be written as-is, TextMessage will be written in UTF-8\");\n\t\topts.addOption(\n\t\t\t\tCMD_COUNT,\n\t\t\t\t\"count\",\n\t\t\t\ttrue,\n\t\t\t\t\"A number of messages to browse,get,move or put (put will put the same message <count> times). 0 means all messages.\");\n\t\topts.addOption(CMD_JMS_HEADERS, \"jms-headers\", false,\n\t\t\t\t\"Print JMS headers\");\n\t\topts.addOption(\n\t\t\t\tCMD_COPY_QUEUE,\n\t\t\t\t\"copy-queue\",\n\t\t\t\ttrue,\n\t\t\t\t\"Copy all messages from this to target. Limited by maxBrowsePageSize in broker settings (default 400).\");\n\t\topts.addOption(CMD_MOVE_QUEUE, \"move-queue\", true,\n\t\t\t\t\"Move all messages from this to target\");\n\t\topts.addOption(CMD_FIND, \"find\", true,\n\t\t\t\t\"Search for messages in queue with this value in payload. Use with browse.\");\n\t\topts.addOption(CMD_SELECTOR, \"selector\", true,\n\t\t\t\t\"Browse or get with selector\");\n\t\topts.addOption(CMD_WAIT, \"wait\", true,\n\t\t\t\t\"Time to wait on get operation. Default 50. 0 equals infinity\");\n\t\topts.addOption(CMD_USER, \"user\", true, \"Username to connect to broker\");\n\t\topts.addOption(CMD_PASS, \"pass\", true, \"Password to connect to broker\");\n\t\topts.addOption(CMD_PRIORITY, \"priority\", true, \"sets JMSPriority\");\n\t\topts.addOption(CMD_AMQP, \"amqp\", false,\n\t\t\t\t\"Set protocol to AMQP. Defaults to OpenWire\");\n\t\topts.addOption(\n\t\t\t\tCMD_JNDI,\n\t\t\t\t\"jndi\",\n\t\t\t\ttrue,\n\t\t\t\t\"Connect via JNDI. Overrides -b and -A options. Specify context file on classpath\");\n\t\topts.addOption(\n\t\t\t\tCMD_JNDI_CF,\n\t\t\t\t\"jndi-cf-name\",\n\t\t\t\ttrue,\n\t\t\t\t\"Specify JNDI name for ConnectionFactory. Defaults to connectionFactory. Use with -J\");\n\t\topts.addOption(CMD_ARTEMIS_CORE, \"artemis-core\", false,\n\t\t\t\t\"Set protocol to ActiveMQ Artemis Core. Defaults to OpenWire\");\n\t\topts.addOption(CMD_OPENWIRE, \"openwire\", false,\n\t\t\t\t\"Set protocol to OpenWire. This is default protocol\");\n\t\topts.addOption(CMD_LIST_QUEUES, \"list-queues\", false,\n\t\t\t\t\"List queues and topics on broker (OpenWire only)\");\n\t\t\n\t\topts.addOption(CMD_NO_TRANSACTION_SUPPORT,\"no-transaction-support\", false, \n\t\t\t\t\"Set to disable transactions if not supported by platform. \"\n\t\t\t\t+ \"I.e. Azure Service Bus. When set to false, the Move option is NOT atomic.\");\t\n\t\t\n\t\topts.addOption(CMD_READ_FOLDER, \"read-folder\", true, \n\t\t\t\t\"Read files in folder and put to queue. Sent files are deleted! Specify path and a filename.\"\n\t\t\t\t\t\t+\" Wildcards are supported '*' and '?'. If no path is given, current directory is assumed.\");\n\n\t\t@SuppressWarnings(\"static-access\")\n\t\tOption property = OptionBuilder\n\t\t\t\t.withArgName(\"property=value\")\n\t\t\t\t.hasArgs(2)\n\t\t\t\t.withValueSeparator()\n\t\t\t\t.withDescription(\n\t\t\t\t\t\t\"use value for given String property. Can be used several times.\")\n\t\t\t\t.create(CMD_SET_HEADER);\n\n\t\topts.addOption(property);\n\n\t\t@SuppressWarnings(\"static-access\")\n\t\tOption longProperty = OptionBuilder\n\t\t\t\t.withArgName(\"property=value\")\n\t\t\t\t.hasArgs(2)\n\t\t\t\t.withValueSeparator()\n\t\t\t\t.withDescription(\n\t\t\t\t\t\t\"use value for given Long property. Can be used several times.\")\n\t\t\t\t.create(CMD_SET_LONG_HEADER);\n\n\t\topts.addOption(longProperty);\n\n\t\t@SuppressWarnings(\"static-access\")\n\t\tOption intProperty = OptionBuilder\n\t\t\t\t.withArgName(\"property=value\")\n\t\t\t\t.hasArgs(2)\n\t\t\t\t.withValueSeparator()\n\t\t\t\t.withDescription(\n\t\t\t\t\t\t\"use value for given Integer property. Can be used several times.\")\n\t\t\t\t.create(CMD_SET_INT_HEADER);\n\t\t\t\t\n\t\topts.addOption(intProperty);\n\t\t\n\t\topts.addOption(CMD_WRITE_DUMP, \"write-dump\", true, \"Write a dump of messages to a file. \"\n\t\t\t\t\t\t+ \"Will preserve metadata and type. Can  be used with transformation option\" );\n\t\t\n\t\topts.addOption(CMD_RESTORE_DUMP, \"restore-dump\", true, \"Restore a dump of messages in a file,\" + \n\t\t\t\t\t\t\"created with -\" + CMD_WRITE_DUMP + \". Can be used with transformation option.\");\n\t\t\n\t\topts.addOption(CMD_TRANSFORM_SCRIPT, \"transform-script\", true, \"JavaScript code (or @path/to/file.js). \"\n\t\t\t\t\t+\"Used to transform messages with the dump options. Access message in JavaScript by msg.JMSType = 'foobar';\");\n\t\t\n\t\tif (args.length == 0) {\n\t\t\tHelpFormatter helpFormatter = new HelpFormatter();\n\t\t\thelpFormatter.printHelp(\n\t\t\t\t\t\"java -jar a-<version>-with-dependencies.jar\", opts, true);\n\t\t\tSystem.exit(0);\n\t\t}\n\n\t\tCommandLineParser cmdParser = new PosixParser();\n\n\t\ttry {\n\t\t\tcmdLine = cmdParser.parse(opts, args);\n\t\t\tProtocol protocol = Protocol.OpenWire;\n\t\t\tif (cmdLine.hasOption(CMD_AMQP)) {\n\t\t\t\tprotocol = Protocol.AMQP;\n\t\t\t} else if (cmdLine.hasOption(CMD_ARTEMIS_CORE)) {\n\t\t\t\tprotocol = Protocol.ArtemisCore;\n\t\t\t}\n\n\t\t\tconnect(cmdLine.getOptionValue(CMD_BROKER, \"tcp://localhost:61616\"),\n\t\t\t\t\tcmdLine.getOptionValue(CMD_USER),\n\t\t\t\t\tcmdLine.getOptionValue(CMD_PASS), protocol,\n\t\t\t\t\tcmdLine.getOptionValue(CMD_JNDI, \"\"),\n\t\t\t\t\tcmdLine.hasOption(CMD_NO_TRANSACTION_SUPPORT));\n\n\t\t\tlong startTime = System.currentTimeMillis();\n\n\t\t\tif (cmdLine.hasOption(CMD_GET)) {\n\t\t\t\texecuteGet(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_PUT)) {\n\t\t\t\texecutePut(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_COPY_QUEUE)) {\n\t\t\t\texecuteCopy(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_MOVE_QUEUE)) {\n\t\t\t\texecuteMove(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_LIST_QUEUES)) {\n\t\t\t\texecuteListQueues(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_READ_FOLDER)) {\n\t\t\t\texecuteReadFolder(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_WRITE_DUMP)) {\n\t\t\t\texecuteWriteDump(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_RESTORE_DUMP)) {\n\t\t\t\texecuteReadDump(cmdLine);\n\t\t\t} else {\n\t\t\t\texecuteBrowse(cmdLine);\n\t\t\t}\n\n\t\t\tlong stopTime = System.currentTimeMillis();\n\t\t\tlong elapsedTime = stopTime - startTime;\n\t\t\toutput(\"Operation completed in \", Long.toString(elapsedTime),\n\t\t\t\t\t\"ms (excluding connect)\");\n\t\t} catch (ParseException pe) {\n\t\t\tpe.printStackTrace();\n\t\t\treturn;\n\t\t} catch (JMSException je) {\n\t\t\tje.printStackTrace();\n\t\t\treturn;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (sess != null) {\n\t\t\t\t\tsess.close();\n\t\t\t\t}\n\n\t\t\t\tif (conn != null) {\n\t\t\t\t\tconn.close();\n\t\t\t\t}\n\t\t\t} catch (JMSException e2) {\n\t\t\t\te2.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tlogger.debug(\"Active threads {}\", Thread.activeCount());\n\t\tlogger.debug(\"At the end of the road\");\n\t}\n","Method after Refactoring":"\tpublic void run(String[] args) throws InterruptedException {\n\t\tOptions opts = createOptions();\n\n\t\tif (args.length == 0) {\n\t\t\tHelpFormatter helpFormatter = new HelpFormatter();\n\t\t\thelpFormatter.printHelp(\n\t\t\t\t\t\"java -jar a-<version>-with-dependencies.jar\", opts, true);\n\t\t\tSystem.exit(0);\n\t\t}\n\n\t\tCommandLineParser cmdParser = new PosixParser();\n\n\t\ttry {\n\t\t\tcmdLine = cmdParser.parse(opts, args);\n\t\t\tif( cmdLine.hasOption(CMD_VERSION)){\n\t\t\t\texecuteShowVersion();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tProtocol protocol = Protocol.OpenWire;\n\t\t\tif (cmdLine.hasOption(CMD_AMQP)) {\n\t\t\t\tprotocol = Protocol.AMQP;\n\t\t\t} else if (cmdLine.hasOption(CMD_ARTEMIS_CORE)) {\n\t\t\t\tprotocol = Protocol.ArtemisCore;\n\t\t\t}\n\n\t\t\tconnect(cmdLine.getOptionValue(CMD_BROKER, \"tcp://localhost:61616\"),\n\t\t\t\t\tcmdLine.getOptionValue(CMD_USER),\n\t\t\t\t\tcmdLine.getOptionValue(CMD_PASS), protocol,\n\t\t\t\t\tcmdLine.getOptionValue(CMD_JNDI, \"\"),\n\t\t\t\t\tcmdLine.hasOption(CMD_NO_TRANSACTION_SUPPORT));\n\n\t\t\tlong startTime = System.currentTimeMillis();\n\t\t\texecuteCommandLine(cmdLine);\n\t\t\tlong stopTime = System.currentTimeMillis();\n\t\t\tlong elapsedTime = stopTime - startTime;\n\t\t\toutput(\"Operation completed in \", Long.toString(elapsedTime),\n\t\t\t\t\t\"ms (excluding connect)\");\n\t\t} catch (ParseException pe) {\n\t\t\tpe.printStackTrace();\n\t\t\treturn;\n\t\t} catch (JMSException je) {\n\t\t\tje.printStackTrace();\n\t\t\treturn;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (sess != null) {\n\t\t\t\t\tsess.close();\n\t\t\t\t}\n\n\t\t\t\tif (conn != null) {\n\t\t\t\t\tconn.close();\n\t\t\t\t}\n\t\t\t} catch (JMSException e2) {\n\t\t\t\te2.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tlogger.debug(\"Active threads {}\", Thread.activeCount());\n\t\tlogger.debug(\"At the end of the road\");\n\t}\n","Extracted Method":"\tprotected void executeCommandLine(CommandLine cmdLine) throws Exception{\n\t\tif (cmdLine.hasOption(CMD_GET)) {\n\t\t\texecuteGet(cmdLine);\n\t\t} else if (cmdLine.hasOption(CMD_PUT)) {\n\t\t\texecutePut(cmdLine);\n\t\t} else if (cmdLine.hasOption(CMD_COPY_QUEUE)) {\n\t\t\texecuteCopy(cmdLine);\n\t\t} else if (cmdLine.hasOption(CMD_MOVE_QUEUE)) {\n\t\t\texecuteMove(cmdLine);\n\t\t} else if (cmdLine.hasOption(CMD_LIST_QUEUES)) {\n\t\t\texecuteListQueues(cmdLine);\n\t\t} else if (cmdLine.hasOption(CMD_READ_FOLDER)) {\n\t\t\texecuteReadFolder(cmdLine);\n\t\t} else if (cmdLine.hasOption(CMD_WRITE_DUMP)) {\n\t\t\texecuteWriteDump(cmdLine);\n\t\t} else if (cmdLine.hasOption(CMD_RESTORE_DUMP)) {\n\t\t\texecuteReadDump(cmdLine);\n\t\t} else {\n\t\t\texecuteBrowse(cmdLine);\n\t\t}\n\t}\n"}
{"Smelly Sample":"\tpublic void run(String[] args) throws InterruptedException {\n\t\tOptions opts = new Options();\n\t\topts.addOption(CMD_BROKER, \"broker\", true,\n\t\t\t\t\"URL to broker. defaults to: tcp://localhost:61616\");\n\t\topts.addOption(CMD_GET, \"get\", false, \"Get a message from destination\");\n\t\topts.addOption(CMD_PUT, \"put\", true,\n\t\t\t\t\"Put a message. Specify data. if starts with @, a file is assumed and loaded\");\n\t\topts.addOption(CMD_TYPE, \"type\", true,\n\t\t\t\t\"Message type to put, [bytes, text, map] - defaults to text\");\n\t\topts.addOption(CMD_ENCODING, \"encoding\", true,\n\t\t\t\t\"Encoding of input file data. Default UTF-8\");\n\t\topts.addOption(CMD_NON_PERSISTENT, \"non-persistent\", false,\n\t\t\t\t\"Set message to non persistent.\");\n\t\topts.addOption(CMD_REPLY_TO, \"reply-to\", true,\n\t\t\t\t\"Set reply to destination, i.e. queue:reply\");\n\t\topts.addOption(CMD_CORRELATION_ID, \"correlation-id\", true,\n\t\t\t\t\"Set CorrelationID\");\n\t\topts.addOption(\n\t\t\t\tCMD_OUTPUT,\n\t\t\t\t\"output\",\n\t\t\t\ttrue,\n\t\t\t\t\"file to write payload to. If multiple messages, a -1.<ext> will be added to the file. BytesMessage will be written as-is, TextMessage will be written in UTF-8\");\n\t\topts.addOption(\n\t\t\t\tCMD_COUNT,\n\t\t\t\t\"count\",\n\t\t\t\ttrue,\n\t\t\t\t\"A number of messages to browse,get,move or put (put will put the same message <count> times). 0 means all messages.\");\n\t\topts.addOption(CMD_JMS_HEADERS, \"jms-headers\", false,\n\t\t\t\t\"Print JMS headers\");\n\t\topts.addOption(\n\t\t\t\tCMD_COPY_QUEUE,\n\t\t\t\t\"copy-queue\",\n\t\t\t\ttrue,\n\t\t\t\t\"Copy all messages from this to target. Limited by maxBrowsePageSize in broker settings (default 400).\");\n\t\topts.addOption(CMD_MOVE_QUEUE, \"move-queue\", true,\n\t\t\t\t\"Move all messages from this to target\");\n\t\topts.addOption(CMD_FIND, \"find\", true,\n\t\t\t\t\"Search for messages in queue with this value in payload. Use with browse.\");\n\t\topts.addOption(CMD_SELECTOR, \"selector\", true,\n\t\t\t\t\"Browse or get with selector\");\n\t\topts.addOption(CMD_WAIT, \"wait\", true,\n\t\t\t\t\"Time to wait on get operation. Default 50. 0 equals infinity\");\n\t\topts.addOption(CMD_USER, \"user\", true, \"Username to connect to broker\");\n\t\topts.addOption(CMD_PASS, \"pass\", true, \"Password to connect to broker\");\n\t\topts.addOption(CMD_PRIORITY, \"priority\", true, \"sets JMSPriority\");\n\t\topts.addOption(CMD_AMQP, \"amqp\", false,\n\t\t\t\t\"Set protocol to AMQP. Defaults to OpenWire\");\n\t\topts.addOption(\n\t\t\t\tCMD_JNDI,\n\t\t\t\t\"jndi\",\n\t\t\t\ttrue,\n\t\t\t\t\"Connect via JNDI. Overrides -b and -A options. Specify context file on classpath\");\n\t\topts.addOption(\n\t\t\t\tCMD_JNDI_CF,\n\t\t\t\t\"jndi-cf-name\",\n\t\t\t\ttrue,\n\t\t\t\t\"Specify JNDI name for ConnectionFactory. Defaults to connectionFactory. Use with -J\");\n\t\topts.addOption(CMD_ARTEMIS_CORE, \"artemis-core\", false,\n\t\t\t\t\"Set protocol to ActiveMQ Artemis Core. Defaults to OpenWire\");\n\t\topts.addOption(CMD_OPENWIRE, \"openwire\", false,\n\t\t\t\t\"Set protocol to OpenWire. This is default protocol\");\n\t\topts.addOption(CMD_LIST_QUEUES, \"list-queues\", false,\n\t\t\t\t\"List queues and topics on broker (OpenWire only)\");\n\t\t\n\t\topts.addOption(CMD_NO_TRANSACTION_SUPPORT,\"no-transaction-support\", false, \n\t\t\t\t\"Set to disable transactions if not supported by platform. \"\n\t\t\t\t+ \"I.e. Azure Service Bus. When set to false, the Move option is NOT atomic.\");\t\n\t\t\n\t\topts.addOption(CMD_READ_FOLDER, \"read-folder\", true, \n\t\t\t\t\"Read files in folder and put to queue. Sent files are deleted! Specify path and a filename.\"\n\t\t\t\t\t\t+\" Wildcards are supported '*' and '?'. If no path is given, current directory is assumed.\");\n\n\t\t@SuppressWarnings(\"static-access\")\n\t\tOption property = OptionBuilder\n\t\t\t\t.withArgName(\"property=value\")\n\t\t\t\t.hasArgs(2)\n\t\t\t\t.withValueSeparator()\n\t\t\t\t.withDescription(\n\t\t\t\t\t\t\"use value for given String property. Can be used several times.\")\n\t\t\t\t.create(CMD_SET_HEADER);\n\n\t\topts.addOption(property);\n\n\t\t@SuppressWarnings(\"static-access\")\n\t\tOption longProperty = OptionBuilder\n\t\t\t\t.withArgName(\"property=value\")\n\t\t\t\t.hasArgs(2)\n\t\t\t\t.withValueSeparator()\n\t\t\t\t.withDescription(\n\t\t\t\t\t\t\"use value for given Long property. Can be used several times.\")\n\t\t\t\t.create(CMD_SET_LONG_HEADER);\n\n\t\topts.addOption(longProperty);\n\n\t\t@SuppressWarnings(\"static-access\")\n\t\tOption intProperty = OptionBuilder\n\t\t\t\t.withArgName(\"property=value\")\n\t\t\t\t.hasArgs(2)\n\t\t\t\t.withValueSeparator()\n\t\t\t\t.withDescription(\n\t\t\t\t\t\t\"use value for given Integer property. Can be used several times.\")\n\t\t\t\t.create(CMD_SET_INT_HEADER);\n\t\t\t\t\n\t\topts.addOption(intProperty);\n\t\t\n\t\topts.addOption(CMD_WRITE_DUMP, \"write-dump\", true, \"Write a dump of messages to a file. \"\n\t\t\t\t\t\t+ \"Will preserve metadata and type. Can  be used with transformation option\" );\n\t\t\n\t\topts.addOption(CMD_RESTORE_DUMP, \"restore-dump\", true, \"Restore a dump of messages in a file,\" + \n\t\t\t\t\t\t\"created with -\" + CMD_WRITE_DUMP + \". Can be used with transformation option.\");\n\t\t\n\t\topts.addOption(CMD_TRANSFORM_SCRIPT, \"transform-script\", true, \"JavaScript code (or @path/to/file.js). \"\n\t\t\t\t\t+\"Used to transform messages with the dump options. Access message in JavaScript by msg.JMSType = 'foobar';\");\n\t\t\n\t\tif (args.length == 0) {\n\t\t\tHelpFormatter helpFormatter = new HelpFormatter();\n\t\t\thelpFormatter.printHelp(\n\t\t\t\t\t\"java -jar a-<version>-with-dependencies.jar\", opts, true);\n\t\t\tSystem.exit(0);\n\t\t}\n\n\t\tCommandLineParser cmdParser = new PosixParser();\n\n\t\ttry {\n\t\t\tcmdLine = cmdParser.parse(opts, args);\n\t\t\tProtocol protocol = Protocol.OpenWire;\n\t\t\tif (cmdLine.hasOption(CMD_AMQP)) {\n\t\t\t\tprotocol = Protocol.AMQP;\n\t\t\t} else if (cmdLine.hasOption(CMD_ARTEMIS_CORE)) {\n\t\t\t\tprotocol = Protocol.ArtemisCore;\n\t\t\t}\n\n\t\t\tconnect(cmdLine.getOptionValue(CMD_BROKER, \"tcp://localhost:61616\"),\n\t\t\t\t\tcmdLine.getOptionValue(CMD_USER),\n\t\t\t\t\tcmdLine.getOptionValue(CMD_PASS), protocol,\n\t\t\t\t\tcmdLine.getOptionValue(CMD_JNDI, \"\"),\n\t\t\t\t\tcmdLine.hasOption(CMD_NO_TRANSACTION_SUPPORT));\n\n\t\t\tlong startTime = System.currentTimeMillis();\n\n\t\t\tif (cmdLine.hasOption(CMD_GET)) {\n\t\t\t\texecuteGet(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_PUT)) {\n\t\t\t\texecutePut(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_COPY_QUEUE)) {\n\t\t\t\texecuteCopy(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_MOVE_QUEUE)) {\n\t\t\t\texecuteMove(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_LIST_QUEUES)) {\n\t\t\t\texecuteListQueues(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_READ_FOLDER)) {\n\t\t\t\texecuteReadFolder(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_WRITE_DUMP)) {\n\t\t\t\texecuteWriteDump(cmdLine);\n\t\t\t} else if (cmdLine.hasOption(CMD_RESTORE_DUMP)) {\n\t\t\t\texecuteReadDump(cmdLine);\n\t\t\t} else {\n\t\t\t\texecuteBrowse(cmdLine);\n\t\t\t}\n\n\t\t\tlong stopTime = System.currentTimeMillis();\n\t\t\tlong elapsedTime = stopTime - startTime;\n\t\t\toutput(\"Operation completed in \", Long.toString(elapsedTime),\n\t\t\t\t\t\"ms (excluding connect)\");\n\t\t} catch (ParseException pe) {\n\t\t\tpe.printStackTrace();\n\t\t\treturn;\n\t\t} catch (JMSException je) {\n\t\t\tje.printStackTrace();\n\t\t\treturn;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (sess != null) {\n\t\t\t\t\tsess.close();\n\t\t\t\t}\n\n\t\t\t\tif (conn != null) {\n\t\t\t\t\tconn.close();\n\t\t\t\t}\n\t\t\t} catch (JMSException e2) {\n\t\t\t\te2.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tlogger.debug(\"Active threads {}\", Thread.activeCount());\n\t\tlogger.debug(\"At the end of the road\");\n\t}\n","Method after Refactoring":"\tpublic void run(String[] args) throws InterruptedException {\n\t\tOptions opts = createOptions();\n\n\t\tif (args.length == 0) {\n\t\t\tHelpFormatter helpFormatter = new HelpFormatter();\n\t\t\thelpFormatter.printHelp(\n\t\t\t\t\t\"java -jar a-<version>-with-dependencies.jar\", opts, true);\n\t\t\tSystem.exit(0);\n\t\t}\n\n\t\tCommandLineParser cmdParser = new PosixParser();\n\n\t\ttry {\n\t\t\tcmdLine = cmdParser.parse(opts, args);\n\t\t\tif( cmdLine.hasOption(CMD_VERSION)){\n\t\t\t\texecuteShowVersion();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tProtocol protocol = Protocol.OpenWire;\n\t\t\tif (cmdLine.hasOption(CMD_AMQP)) {\n\t\t\t\tprotocol = Protocol.AMQP;\n\t\t\t} else if (cmdLine.hasOption(CMD_ARTEMIS_CORE)) {\n\t\t\t\tprotocol = Protocol.ArtemisCore;\n\t\t\t}\n\n\t\t\tconnect(cmdLine.getOptionValue(CMD_BROKER, \"tcp://localhost:61616\"),\n\t\t\t\t\tcmdLine.getOptionValue(CMD_USER),\n\t\t\t\t\tcmdLine.getOptionValue(CMD_PASS), protocol,\n\t\t\t\t\tcmdLine.getOptionValue(CMD_JNDI, \"\"),\n\t\t\t\t\tcmdLine.hasOption(CMD_NO_TRANSACTION_SUPPORT));\n\n\t\t\tlong startTime = System.currentTimeMillis();\n\t\t\texecuteCommandLine(cmdLine);\n\t\t\tlong stopTime = System.currentTimeMillis();\n\t\t\tlong elapsedTime = stopTime - startTime;\n\t\t\toutput(\"Operation completed in \", Long.toString(elapsedTime),\n\t\t\t\t\t\"ms (excluding connect)\");\n\t\t} catch (ParseException pe) {\n\t\t\tpe.printStackTrace();\n\t\t\treturn;\n\t\t} catch (JMSException je) {\n\t\t\tje.printStackTrace();\n\t\t\treturn;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (sess != null) {\n\t\t\t\t\tsess.close();\n\t\t\t\t}\n\n\t\t\t\tif (conn != null) {\n\t\t\t\t\tconn.close();\n\t\t\t\t}\n\t\t\t} catch (JMSException e2) {\n\t\t\t\te2.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tlogger.debug(\"Active threads {}\", Thread.activeCount());\n\t\tlogger.debug(\"At the end of the road\");\n\t}\n","Extracted Method":"\tprotected Options createOptions() {\n\t\tOptions opts = new Options();\n\t\topts.addOption(CMD_BROKER, \"broker\", true,\n\t\t\t\t\"URL to broker. defaults to: tcp://localhost:61616\");\n\t\topts.addOption(CMD_GET, \"get\", false, \"Get a message from destination\");\n\t\topts.addOption(CMD_PUT, \"put\", true,\n\t\t\t\t\"Put a message. Specify data. if starts with @, a file is assumed and loaded\");\n\t\topts.addOption(CMD_TYPE, \"type\", true,\n\t\t\t\t\"Message type to put, [bytes, text, map] - defaults to text\");\n\t\topts.addOption(CMD_ENCODING, \"encoding\", true,\n\t\t\t\t\"Encoding of input file data. Default UTF-8\");\n\t\topts.addOption(CMD_NON_PERSISTENT, \"non-persistent\", false,\n\t\t\t\t\"Set message to non persistent.\");\n\t\topts.addOption(CMD_REPLY_TO, \"reply-to\", true,\n\t\t\t\t\"Set reply to destination, i.e. queue:reply\");\n\t\topts.addOption(CMD_CORRELATION_ID, \"correlation-id\", true,\n\t\t\t\t\"Set CorrelationID\");\n\t\topts.addOption(\n\t\t\t\tCMD_OUTPUT,\n\t\t\t\t\"output\",\n\t\t\t\ttrue,\n\t\t\t\t\"file to write payload to. If multiple messages, a -1.<ext> will be added to the file. BytesMessage will be written as-is, TextMessage will be written in UTF-8\");\n\t\topts.addOption(\n\t\t\t\tCMD_COUNT,\n\t\t\t\t\"count\",\n\t\t\t\ttrue,\n\t\t\t\t\"A number of messages to browse,get,move or put (put will put the same message <count> times). 0 means all messages.\");\n\t\topts.addOption(CMD_JMS_HEADERS, \"jms-headers\", false,\n\t\t\t\t\"Print JMS headers\");\n\t\topts.addOption(\n\t\t\t\tCMD_COPY_QUEUE,\n\t\t\t\t\"copy-queue\",\n\t\t\t\ttrue,\n\t\t\t\t\"Copy all messages from this to target. Limited by maxBrowsePageSize in broker settings (default 400).\");\n\t\topts.addOption(CMD_MOVE_QUEUE, \"move-queue\", true,\n\t\t\t\t\"Move all messages from this to target\");\n\t\topts.addOption(CMD_FIND, \"find\", true,\n\t\t\t\t\"Search for messages in queue with this value in payload. Use with browse.\");\n\t\topts.addOption(CMD_SELECTOR, \"selector\", true,\n\t\t\t\t\"Browse or get with selector\");\n\t\topts.addOption(CMD_WAIT, \"wait\", true,\n\t\t\t\t\"Time to wait on get operation. Default 50. 0 equals infinity\");\n\t\topts.addOption(CMD_USER, \"user\", true, \"Username to connect to broker\");\n\t\topts.addOption(CMD_PASS, \"pass\", true, \"Password to connect to broker\");\n\t\topts.addOption(CMD_PRIORITY, \"priority\", true, \"sets JMSPriority\");\n\t\topts.addOption(CMD_AMQP, \"amqp\", false,\n\t\t\t\t\"Set protocol to AMQP. Defaults to OpenWire\");\n\t\topts.addOption(\n\t\t\t\tCMD_JNDI,\n\t\t\t\t\"jndi\",\n\t\t\t\ttrue,\n\t\t\t\t\"Connect via JNDI. Overrides -b and -A options. Specify context file on classpath\");\n\t\topts.addOption(\n\t\t\t\tCMD_JNDI_CF,\n\t\t\t\t\"jndi-cf-name\",\n\t\t\t\ttrue,\n\t\t\t\t\"Specify JNDI name for ConnectionFactory. Defaults to connectionFactory. Use with -J\");\n\t\topts.addOption(CMD_ARTEMIS_CORE, \"artemis-core\", false,\n\t\t\t\t\"Set protocol to ActiveMQ Artemis Core. Defaults to OpenWire\");\n\t\topts.addOption(CMD_OPENWIRE, \"openwire\", false,\n\t\t\t\t\"Set protocol to OpenWire. This is default protocol\");\n\t\topts.addOption(CMD_LIST_QUEUES, \"list-queues\", false,\n\t\t\t\t\"List queues and topics on broker (OpenWire only)\");\n\t\t\n\t\topts.addOption(CMD_NO_TRANSACTION_SUPPORT,\"no-transaction-support\", false, \n\t\t\t\t\"Set to disable transactions if not supported by platform. \"\n\t\t\t\t+ \"I.e. Azure Service Bus. When set to false, the Move option is NOT atomic.\");\t\n\t\t\n\t\topts.addOption(CMD_READ_FOLDER, \"read-folder\", true, \n\t\t\t\t\"Read files in folder and put to queue. Sent files are deleted! Specify path and a filename.\"\n\t\t\t\t\t\t+\" Wildcards are supported '*' and '?'. If no path is given, current directory is assumed.\");\n\n\t\t@SuppressWarnings(\"static-access\")\n\t\tOption property = OptionBuilder\n\t\t\t\t.withArgName(\"property=value\")\n\t\t\t\t.hasArgs(2)\n\t\t\t\t.withValueSeparator()\n\t\t\t\t.withDescription(\n\t\t\t\t\t\t\"use value for given String property. Can be used several times.\")\n\t\t\t\t.create(CMD_SET_HEADER);\n\n\t\topts.addOption(property);\n\n\t\t@SuppressWarnings(\"static-access\")\n\t\tOption longProperty = OptionBuilder\n\t\t\t\t.withArgName(\"property=value\")\n\t\t\t\t.hasArgs(2)\n\t\t\t\t.withValueSeparator()\n\t\t\t\t.withDescription(\n\t\t\t\t\t\t\"use value for given Long property. Can be used several times.\")\n\t\t\t\t.create(CMD_SET_LONG_HEADER);\n\n\t\topts.addOption(longProperty);\n\n\t\t@SuppressWarnings(\"static-access\")\n\t\tOption intProperty = OptionBuilder\n\t\t\t\t.withArgName(\"property=value\")\n\t\t\t\t.hasArgs(2)\n\t\t\t\t.withValueSeparator()\n\t\t\t\t.withDescription(\n\t\t\t\t\t\t\"use value for given Integer property. Can be used several times.\")\n\t\t\t\t.create(CMD_SET_INT_HEADER);\n\t\t\t\t\n\t\topts.addOption(intProperty);\n\t\t\n\t\topts.addOption(CMD_WRITE_DUMP, \"write-dump\", true, \"Write a dump of messages to a file. \"\n\t\t\t\t\t\t+ \"Will preserve metadata and type. Can  be used with transformation option\" );\n\t\t\n\t\topts.addOption(CMD_RESTORE_DUMP, \"restore-dump\", true, \"Restore a dump of messages in a file,\" + \n\t\t\t\t\t\t\"created with -\" + CMD_WRITE_DUMP + \". Can be used with transformation option.\");\n\t\t\n\t\topts.addOption(CMD_TRANSFORM_SCRIPT, \"transform-script\", true, \"JavaScript code (or @path/to/file.js). \"\n\t\t\t\t\t+\"Used to transform messages with the dump options. Access message in JavaScript by msg.JMSType = 'foobar';\");\n\n\t\topts.addOption(CMD_VERSION, \"version\", false, \"Show version of A\");\n\t\t\n\t\treturn opts;\n\t}\n"}
{"Smelly Sample":"\tpublic List<Message> loadMessagesFromJson(String json) throws JsonParseException, JsonMappingException, IOException, JMSException{\n\t\tObjectMapper om = new ObjectMapper();\n\t\tList<MessageDump> msgDumps = om.readValue(json, new TypeReference<List<MessageDump>>(){});\n\t\tList<Message> messages = new ArrayList<Message>(msgDumps.size());\n\t\tfor(MessageDump dump : msgDumps){\n\t\t\tmessages.add(pojoToMessage(dump));\n\t\t}\n\t\treturn messages;\n\t}\n","Method after Refactoring":"\tpublic List<Message> loadMessagesFromJson(String json) throws JsonParseException, JsonMappingException, IOException, JMSException{\n\t\tList<MessageDump> msgDumps = toDumpMessages(json);\n\t\tList<Message> messages = new ArrayList<Message>(msgDumps.size());\n\t\tfor(MessageDump dump : msgDumps){\n\t\t\tmessages.add(toJmsMessage(dump));\n\t\t}\n\t\treturn messages;\n\t}\n","Extracted Method":"\tpublic List<MessageDump> toDumpMessages(final String json) throws JsonParseException, JsonMappingException, IOException{\n\t\tObjectMapper om = new ObjectMapper();\n\t\tList<MessageDump> msgDumps = om.readValue(json, new TypeReference<List<MessageDump>>(){});\n\t\treturn msgDumps;\n\t}\n"}
{"Smelly Sample":"\tprotected Message pojoToMessage(MessageDump dump) throws JMSException {\n\t\tMessage msg = null;\n\t\tif (\"TextMessage\".equals(dump.type) ) {\n\t\t\tTextMessage tm = session.createTextMessage(dump.body);\n\t\t\tmsg = tm;\n\t\t} else if ( \"BytesMessage\".equals(dump.type) ) {\n\t\t\tBytesMessage bm = session.createBytesMessage();\n\t\t\tbyte[] messageBytes = Base64.decodeBase64(dump.body);\n\t\t\tbm.writeBytes(messageBytes);\n\t\t\tmsg = bm;\n\t\t} else if (\"ObjectMessage\".equals(dump.type)) {\n\t\t\tbyte[] objectBytes = Base64.decodeBase64(dump.body);\n\t\t\tSerializable theObject = SerializationUtils.deserialize(objectBytes);\n\t\t\tObjectMessage om = session.createObjectMessage(theObject);\n\t\t\tmsg = om;\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"Illegal type: \" + dump.type);\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Boolean> entry : dump.boolProperties.entrySet() ) {\n\t\t\tmsg.setBooleanProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, String> entry : dump.stringProperties.entrySet() ) {\n\t\t\tmsg.setStringProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Short> entry : dump.shortProperties.entrySet() ) {\n\t\t\tmsg.setShortProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Integer> entry : dump.intProperties.entrySet() ) {\n\t\t\tmsg.setIntProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Long> entry : dump.longProperties.entrySet() ) {\n\t\t\tmsg.setLongProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Float> entry : dump.floatProperties.entrySet() ) {\n\t\t\tmsg.setFloatProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Double> entry : dump.doubleProperties.entrySet() ) {\n\t\t\tmsg.setDoubleProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Byte> entry : dump.byteProperties.entrySet() ) {\n\t\t\tmsg.setByteProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String,String> entry : dump.objectProperties.entrySet() ) {\n\t\t\tbyte[] objectBytes = Base64.decodeBase64(entry.getValue());\n\t\t\tSerializable theObject = SerializationUtils.deserialize(objectBytes);\n\t\t\tmsg.setObjectProperty(entry.getKey(),theObject);\n\t\t}\n\t\t\n\t\t\n\t\tif( dump.JMSRedelivered != null) {\n\t\t\tmsg.setJMSRedelivered(dump.JMSRedelivered);\n\t\t}\n\t\t\n\t\tif (dump.JMSCorrelationID != null) {\n\t\t\tmsg.setJMSCorrelationID(dump.JMSCorrelationID);\n\t\t}\n\t\t\n\t\tif( dump.JMSDeliveryMode != null ) {\n\t\t\tmsg.setJMSDeliveryMode(dump.JMSDeliveryMode);\n\t\t}\n\t\t\n\t\tif( dump.JMSExpiration != null){\n\t\t\tmsg.setJMSExpiration(dump.JMSExpiration);\n\t\t}\n\t\t\n\t\tif( dump.JMSMessageID != null) {\n\t\t\tmsg.setJMSMessageID(dump.JMSMessageID);\n\t\t}\n\t\t\n\t\tif (dump.JMSTimestamp != null) {\n\t\t\tmsg.setJMSTimestamp(dump.JMSTimestamp);\n\t\t}\n\t\t\n\t\tif (dump.JMSType != null) {\n\t\t\tmsg.setJMSType(dump.JMSType);\n\t\t}\n\t\t\n\t\treturn msg;\n\t}\n","Method after Refactoring":"\tpublic List<Message> toMessages(final List<MessageDump> msgs) throws JMSException {\n\t\tList<Message> jmsMessages = new ArrayList<>();\n\t\tfor (MessageDump msg : msgs) {\n\t\t\tjmsMessages.add(toJmsMessage(msg));\n\t\t}\n\t\treturn jmsMessages;\n\t}\n","Extracted Method":"\tprotected Message toJmsMessage(MessageDump dump) throws JMSException {\n\t\tMessage msg = null;\n\t\t// TODO add support for MapMessage\n\t\tif (\"TextMessage\".equals(dump.type) ) {\n\t\t\tTextMessage tm = session.createTextMessage(dump.body);\n\t\t\tmsg = tm;\n\t\t} else if ( \"BytesMessage\".equals(dump.type) ) {\n\t\t\tBytesMessage bm = session.createBytesMessage();\n\t\t\tbyte[] messageBytes = Base64.decodeBase64(dump.body);\n\t\t\tbm.writeBytes(messageBytes);\n\t\t\tmsg = bm;\n\t\t} else if (\"ObjectMessage\".equals(dump.type)) {\n\t\t\tbyte[] objectBytes = Base64.decodeBase64(dump.body);\n\t\t\tSerializable theObject = SerializationUtils.deserialize(objectBytes);\n\t\t\tObjectMessage om = session.createObjectMessage(theObject);\n\t\t\tmsg = om;\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"Illegal type: \" + dump.type);\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Boolean> entry : dump.boolProperties.entrySet() ) {\n\t\t\tmsg.setBooleanProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, String> entry : dump.stringProperties.entrySet() ) {\n\t\t\tmsg.setStringProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Short> entry : dump.shortProperties.entrySet() ) {\n\t\t\tmsg.setShortProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Integer> entry : dump.intProperties.entrySet() ) {\n\t\t\tmsg.setIntProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Long> entry : dump.longProperties.entrySet() ) {\n\t\t\tmsg.setLongProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Float> entry : dump.floatProperties.entrySet() ) {\n\t\t\tmsg.setFloatProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Double> entry : dump.doubleProperties.entrySet() ) {\n\t\t\tmsg.setDoubleProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String, Byte> entry : dump.byteProperties.entrySet() ) {\n\t\t\tmsg.setByteProperty(entry.getKey(), entry.getValue());\n\t\t}\n\t\t\n\t\tfor( Map.Entry<String,String> entry : dump.objectProperties.entrySet() ) {\n\t\t\tbyte[] objectBytes = Base64.decodeBase64(entry.getValue());\n\t\t\tSerializable theObject = SerializationUtils.deserialize(objectBytes);\n\t\t\tmsg.setObjectProperty(entry.getKey(),theObject);\n\t\t}\n\t\t\n\t\t\n\t\tif( dump.JMSRedelivered != null) {\n\t\t\tmsg.setJMSRedelivered(dump.JMSRedelivered);\n\t\t}\n\t\t\n\t\tif (dump.JMSCorrelationID != null) {\n\t\t\tmsg.setJMSCorrelationID(dump.JMSCorrelationID);\n\t\t}\n\t\t\n\t\tif( dump.JMSDeliveryMode != null ) {\n\t\t\tmsg.setJMSDeliveryMode(dump.JMSDeliveryMode);\n\t\t}\n\t\t\n\t\tif( dump.JMSExpiration != null){\n\t\t\tmsg.setJMSExpiration(dump.JMSExpiration);\n\t\t}\n\t\t\n\t\tif( dump.JMSMessageID != null) {\n\t\t\tmsg.setJMSMessageID(dump.JMSMessageID);\n\t\t}\n\t\t\n\t\tif (dump.JMSTimestamp != null) {\n\t\t\tmsg.setJMSTimestamp(dump.JMSTimestamp);\n\t\t}\n\t\t\n\t\tif (dump.JMSType != null) {\n\t\t\tmsg.setJMSType(dump.JMSType);\n\t\t}\n\t\t\n\t\tif (dump.JMSPriority != null) {\n\t\t\tmsg.setJMSPriority(dump.JMSPriority);\n\t\t}\n\t\t\n\t\treturn msg;\n\t}\n"}
{"Smelly Sample":"\tprotected void putData(final String data, final CommandLine cmdLine) throws IOException,\n\t\t\tJMSException {\n\t\t// Check if we have properties to put\n\t\tProperties props = cmdLine.getOptionProperties(CMD_SET_HEADER);\n\t\tProperties intProps = cmdLine.getOptionProperties(CMD_SET_INT_HEADER);\n\t\tProperties longProps = cmdLine.getOptionProperties(CMD_SET_LONG_HEADER);\n\n\t\tString type = cmdLine.getOptionValue(CMD_TYPE, DEFAULT_TYPE);\n\t\tString encoding = cmdLine.getOptionValue(CMD_ENCODING, Charset\n\t\t\t\t.defaultCharset().name());\n\n\t\tMessage outMsg = null;\n\t\t// figure out input data\n\t\tif (data.startsWith(\"@\")) {\n\t\t\t\n\t\t\t// Load file.\n\t\t\tbyte[] bytes = FileUtils.readFileToByteArray(new File(data\n\t\t\t\t\t.substring(1)));\n\t\t\tif (type.equals(TYPE_TEXT)) {\n\t\t\t\toutMsg = sess.createTextMessage(new String(bytes, encoding));\n\t\t\t} else if(type.equals(TYPE_BYTE)) {\n\t\t\t\tBytesMessage bytesMsg = sess.createBytesMessage();\n\t\t\t\tbytesMsg.writeBytes(bytes);\n\t\t\t\toutMsg = bytesMsg;\n\t\t\t} else if(type.equals(TYPE_MAP)) {\n\t\t\t\tMapMessage mapMsg = sess.createMapMessage();\n\t\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\t\tMap<String, Object> msg = mapper.readValue(bytes, new TypeReference<Map<String, Object>>() { });\n\t\t\t\tfor (String key : msg.keySet()) {\n\t\t\t\t\tmapMsg.setObject(key, msg.get(key));\n\t\t\t\t}\n\t\t\t\toutMsg = mapMsg;\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(CMD_TYPE + \": \" + type);\n\t\t\t}\n\t\t} else {\n\t\t\toutMsg = sess.createTextMessage(data);\n\t\t}\n\n\t\tMessageProducer mp = sess.createProducer(createDestination(cmdLine\n\t\t\t\t.getArgs()[0]));\n\t\tif (cmdLine.hasOption(\"n\")) {\n\t\t\tmp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n\t\t}\n\n\t\t// enrich headers.\n\t\tfor (Entry<Object, Object> p : props.entrySet()) {\n\t\t\toutMsg.setObjectProperty((String) p.getKey(), p.getValue());\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : intProps.entrySet()) {\n\t\t\toutMsg.setIntProperty((String) p.getKey(), Integer.parseInt((String)p.getValue()));\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : longProps.entrySet()) {\n\t\t\toutMsg.setLongProperty((String) p.getKey(), Long.parseLong((String)p.getValue()));\n\t\t}\n\n\t\tif (cmdLine.hasOption(\"r\")) {\n\t\t\toutMsg.setJMSReplyTo(createDestination(cmdLine.getOptionValue(\"r\")));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_CORRELATION_ID)) {\n\t\t\toutMsg.setJMSCorrelationID(cmdLine.getOptionValue(CMD_CORRELATION_ID));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_PRIORITY)) {\n\t\t\ttry {\n\t\t\t\tint priority = Integer.parseInt(cmdLine\n\t\t\t\t\t\t.getOptionValue(CMD_PRIORITY));\n\t\t\t\tmp.setPriority(priority);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\t\"JMSPriority has to be an integer value\");\n\t\t\t}\n\t\t}\n\n\t\t// send multiple messages?\n\t\tif (cmdLine.hasOption(\"c\")) {\n\t\t\tint count = Integer.parseInt(cmdLine.getOptionValue(\"c\"));\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\tmp.send(outMsg);\n\t\t\t}\n\t\t\toutput(\"\", count, \" messages sent\");\n\t\t} else {\n\t\t\tmp.send(outMsg);\n\t\t}\n\t}\n","Method after Refactoring":"\tprotected void putData(final String data, final CommandLine cmdLine) throws IOException,\n\t\t\tJMSException {\n\t\t// Check if we have properties to put\n\t\tProperties props = cmdLine.getOptionProperties(CMD_SET_HEADER);\n\t\tProperties intProps = cmdLine.getOptionProperties(CMD_SET_INT_HEADER);\n\t\tProperties longProps = cmdLine.getOptionProperties(CMD_SET_LONG_HEADER);\n\n\t\tString type = cmdLine.getOptionValue(CMD_TYPE, DEFAULT_TYPE);\n\t\tString encoding = cmdLine.getOptionValue(CMD_ENCODING, Charset\n\t\t\t\t.defaultCharset().name());\n\n\t\tMessage outMsg = null;\n\t\t// figure out input data\n\t\tif (data.startsWith(\"@\")) {\n\t\t\toutMsg = createMessageFromFile(data, type, encoding);\n\t\t} else {\n\t\t\toutMsg = createMessageFromInput(data, type, encoding);\n\t\t}\n\n\t\tMessageProducer mp = sess.createProducer(createDestination(cmdLine\n\t\t\t\t.getArgs()[0]));\n\t\tif (cmdLine.hasOption(\"n\")) {\n\t\t\tmp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n\t\t}\n\n\t\t// enrich headers.\n\t\tfor (Entry<Object, Object> p : props.entrySet()) {\n\t\t\toutMsg.setObjectProperty((String) p.getKey(), p.getValue());\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : intProps.entrySet()) {\n\t\t\toutMsg.setIntProperty((String) p.getKey(), Integer.parseInt((String)p.getValue()));\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : longProps.entrySet()) {\n\t\t\toutMsg.setLongProperty((String) p.getKey(), Long.parseLong((String)p.getValue()));\n\t\t}\n\n\t\tif (cmdLine.hasOption(\"r\")) {\n\t\t\toutMsg.setJMSReplyTo(createDestination(cmdLine.getOptionValue(\"r\")));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_CORRELATION_ID)) {\n\t\t\toutMsg.setJMSCorrelationID(cmdLine.getOptionValue(CMD_CORRELATION_ID));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_PRIORITY)) {\n\t\t\ttry {\n\t\t\t\tint priority = Integer.parseInt(cmdLine\n\t\t\t\t\t\t.getOptionValue(CMD_PRIORITY));\n\t\t\t\tmp.setPriority(priority);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\t\"JMSPriority has to be an integer value\");\n\t\t\t}\n\t\t}\n\n\t\t// send multiple messages?\n\t\tif (cmdLine.hasOption(\"c\")) {\n\t\t\tint count = Integer.parseInt(cmdLine.getOptionValue(\"c\"));\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\tmp.send(outMsg);\n\t\t\t}\n\t\t\toutput(\"\", count, \" messages sent\");\n\t\t} else {\n\t\t\tmp.send(outMsg);\n\t\t}\n\t}\n","Extracted Method":"\tprotected Message createMessageFromInput(final String data, String type, String encoding)\n\t\t\tthrows JMSException, UnsupportedEncodingException, IOException, JsonParseException, JsonMappingException {\n\t\tMessage outMsg = null;\n\t\tif( type.equals(TYPE_TEXT)) {\n\t\t\toutMsg = sess.createTextMessage(data);\n\t\t} else if ( type.equals(TYPE_BYTES)) {\n\t\t\tBytesMessage bytesMsg = sess.createBytesMessage();\n\t\t\tbytesMsg.writeBytes(data.getBytes(encoding));\n\t\t\toutMsg = bytesMsg;\n\t\t} else if( type.equals(TYPE_MAP)) {\n\t\t\tMapMessage mapMsg = sess.createMapMessage();\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tMap<String, Object> msg = mapper.readValue(data, new TypeReference<Map<String, Object>>() { });\n\t\t\tfor (String key : msg.keySet()) {\n\t\t\t\tmapMsg.setObject(key, msg.get(key));\n\t\t\t}\n\t\t\toutMsg = mapMsg;\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(CMD_TYPE + \": \" + type);\n\t\t}\n\t\treturn outMsg;\n\t}\n"}
{"Smelly Sample":"\tprotected void putData(final String data, final CommandLine cmdLine) throws IOException,\n\t\t\tJMSException {\n\t\t// Check if we have properties to put\n\t\tProperties props = cmdLine.getOptionProperties(CMD_SET_HEADER);\n\t\tProperties intProps = cmdLine.getOptionProperties(CMD_SET_INT_HEADER);\n\t\tProperties longProps = cmdLine.getOptionProperties(CMD_SET_LONG_HEADER);\n\n\t\tString type = cmdLine.getOptionValue(CMD_TYPE, DEFAULT_TYPE);\n\t\tString encoding = cmdLine.getOptionValue(CMD_ENCODING, Charset\n\t\t\t\t.defaultCharset().name());\n\n\t\tMessage outMsg = null;\n\t\t// figure out input data\n\t\tif (data.startsWith(\"@\")) {\n\t\t\t\n\t\t\t// Load file.\n\t\t\tbyte[] bytes = FileUtils.readFileToByteArray(new File(data\n\t\t\t\t\t.substring(1)));\n\t\t\tif (type.equals(TYPE_TEXT)) {\n\t\t\t\toutMsg = sess.createTextMessage(new String(bytes, encoding));\n\t\t\t} else if(type.equals(TYPE_BYTE)) {\n\t\t\t\tBytesMessage bytesMsg = sess.createBytesMessage();\n\t\t\t\tbytesMsg.writeBytes(bytes);\n\t\t\t\toutMsg = bytesMsg;\n\t\t\t} else if(type.equals(TYPE_MAP)) {\n\t\t\t\tMapMessage mapMsg = sess.createMapMessage();\n\t\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\t\tMap<String, Object> msg = mapper.readValue(bytes, new TypeReference<Map<String, Object>>() { });\n\t\t\t\tfor (String key : msg.keySet()) {\n\t\t\t\t\tmapMsg.setObject(key, msg.get(key));\n\t\t\t\t}\n\t\t\t\toutMsg = mapMsg;\n\t\t\t} else {\n\t\t\t\tthrow new IllegalArgumentException(CMD_TYPE + \": \" + type);\n\t\t\t}\n\t\t} else {\n\t\t\toutMsg = sess.createTextMessage(data);\n\t\t}\n\n\t\tMessageProducer mp = sess.createProducer(createDestination(cmdLine\n\t\t\t\t.getArgs()[0]));\n\t\tif (cmdLine.hasOption(\"n\")) {\n\t\t\tmp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n\t\t}\n\n\t\t// enrich headers.\n\t\tfor (Entry<Object, Object> p : props.entrySet()) {\n\t\t\toutMsg.setObjectProperty((String) p.getKey(), p.getValue());\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : intProps.entrySet()) {\n\t\t\toutMsg.setIntProperty((String) p.getKey(), Integer.parseInt((String)p.getValue()));\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : longProps.entrySet()) {\n\t\t\toutMsg.setLongProperty((String) p.getKey(), Long.parseLong((String)p.getValue()));\n\t\t}\n\n\t\tif (cmdLine.hasOption(\"r\")) {\n\t\t\toutMsg.setJMSReplyTo(createDestination(cmdLine.getOptionValue(\"r\")));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_CORRELATION_ID)) {\n\t\t\toutMsg.setJMSCorrelationID(cmdLine.getOptionValue(CMD_CORRELATION_ID));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_PRIORITY)) {\n\t\t\ttry {\n\t\t\t\tint priority = Integer.parseInt(cmdLine\n\t\t\t\t\t\t.getOptionValue(CMD_PRIORITY));\n\t\t\t\tmp.setPriority(priority);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\t\"JMSPriority has to be an integer value\");\n\t\t\t}\n\t\t}\n\n\t\t// send multiple messages?\n\t\tif (cmdLine.hasOption(\"c\")) {\n\t\t\tint count = Integer.parseInt(cmdLine.getOptionValue(\"c\"));\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\tmp.send(outMsg);\n\t\t\t}\n\t\t\toutput(\"\", count, \" messages sent\");\n\t\t} else {\n\t\t\tmp.send(outMsg);\n\t\t}\n\t}\n","Method after Refactoring":"\tprotected void putData(final String data, final CommandLine cmdLine) throws IOException,\n\t\t\tJMSException {\n\t\t// Check if we have properties to put\n\t\tProperties props = cmdLine.getOptionProperties(CMD_SET_HEADER);\n\t\tProperties intProps = cmdLine.getOptionProperties(CMD_SET_INT_HEADER);\n\t\tProperties longProps = cmdLine.getOptionProperties(CMD_SET_LONG_HEADER);\n\n\t\tString type = cmdLine.getOptionValue(CMD_TYPE, DEFAULT_TYPE);\n\t\tString encoding = cmdLine.getOptionValue(CMD_ENCODING, Charset\n\t\t\t\t.defaultCharset().name());\n\n\t\tMessage outMsg = null;\n\t\t// figure out input data\n\t\tif (data.startsWith(\"@\")) {\n\t\t\toutMsg = createMessageFromFile(data, type, encoding);\n\t\t} else {\n\t\t\toutMsg = createMessageFromInput(data, type, encoding);\n\t\t}\n\n\t\tMessageProducer mp = sess.createProducer(createDestination(cmdLine\n\t\t\t\t.getArgs()[0]));\n\t\tif (cmdLine.hasOption(\"n\")) {\n\t\t\tmp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n\t\t}\n\n\t\t// enrich headers.\n\t\tfor (Entry<Object, Object> p : props.entrySet()) {\n\t\t\toutMsg.setObjectProperty((String) p.getKey(), p.getValue());\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : intProps.entrySet()) {\n\t\t\toutMsg.setIntProperty((String) p.getKey(), Integer.parseInt((String)p.getValue()));\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : longProps.entrySet()) {\n\t\t\toutMsg.setLongProperty((String) p.getKey(), Long.parseLong((String)p.getValue()));\n\t\t}\n\n\t\tif (cmdLine.hasOption(\"r\")) {\n\t\t\toutMsg.setJMSReplyTo(createDestination(cmdLine.getOptionValue(\"r\")));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_CORRELATION_ID)) {\n\t\t\toutMsg.setJMSCorrelationID(cmdLine.getOptionValue(CMD_CORRELATION_ID));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_PRIORITY)) {\n\t\t\ttry {\n\t\t\t\tint priority = Integer.parseInt(cmdLine\n\t\t\t\t\t\t.getOptionValue(CMD_PRIORITY));\n\t\t\t\tmp.setPriority(priority);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\t\"JMSPriority has to be an integer value\");\n\t\t\t}\n\t\t}\n\n\t\t// send multiple messages?\n\t\tif (cmdLine.hasOption(\"c\")) {\n\t\t\tint count = Integer.parseInt(cmdLine.getOptionValue(\"c\"));\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\tmp.send(outMsg);\n\t\t\t}\n\t\t\toutput(\"\", count, \" messages sent\");\n\t\t} else {\n\t\t\tmp.send(outMsg);\n\t\t}\n\t}\n","Extracted Method":"\tprotected Message createMessageFromFile(final String data, String type, String encoding)\n\t\t\tthrows IOException, JMSException, UnsupportedEncodingException, JsonParseException, JsonMappingException {\n\t\t\n\t\tMessage outMsg = null;\n\t\t// Load file.\n\t\tbyte[] bytes = FileUtils.readFileToByteArray(new File(data\n\t\t\t\t.substring(1)));\n\t\tif (type.equals(TYPE_TEXT)) {\n\t\t\toutMsg = sess.createTextMessage(new String(bytes, encoding));\n\t\t} else if(type.equals(TYPE_BYTES)) {\n\t\t\tBytesMessage bytesMsg = sess.createBytesMessage();\n\t\t\tbytesMsg.writeBytes(bytes);\n\t\t\toutMsg = bytesMsg;\n\t\t} else if(type.equals(TYPE_MAP)) {\n\t\t\tMapMessage mapMsg = sess.createMapMessage();\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tMap<String, Object> msg = mapper.readValue(bytes, new TypeReference<Map<String, Object>>() { });\n\t\t\tfor (String key : msg.keySet()) {\n\t\t\t\tmapMsg.setObject(key, msg.get(key));\n\t\t\t}\n\t\t\toutMsg = mapMsg;\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(CMD_TYPE + \": \" + type);\n\t\t}\n\t\treturn outMsg;\n\t}\n"}
{"Smelly Sample":"\tprotected void executePut(final CommandLine cmdLine) throws IOException,\n\t\t\tJMSException {\n\t\t// Check if we have properties to put\n\t\tProperties props = cmdLine.getOptionProperties(CMD_SET_HEADER);\n\t\tProperties intProps = cmdLine.getOptionProperties(CMD_SET_INT_HEADER);\n\t\tProperties longProps = cmdLine.getOptionProperties(CMD_SET_LONG_HEADER);\n\n\t\tString type = cmdLine.getOptionValue(CMD_TYPE, DEFAULT_TYPE);\n\t\tString encoding = cmdLine.getOptionValue(CMD_ENCODING, Charset\n\t\t\t\t.defaultCharset().name());\n\n\t\tMessage outMsg = null;\n\t\t// figure out input data\n\t\tString data = cmdLine.getOptionValue(CMD_PUT);\n\t\tif (data.startsWith(\"@\")) {\n\t\t\t// Load file.\n\t\t\tbyte[] bytes = FileUtils.readFileToByteArray(new File(data\n\t\t\t\t\t.substring(1)));\n\t\t\tif (type.equals(TYPE_TEXT)) {\n\t\t\t\toutMsg = sess.createTextMessage(new String(bytes, encoding));\n\t\t\t} else {\n\t\t\t\tBytesMessage bytesMsg = sess.createBytesMessage();\n\t\t\t\tbytesMsg.writeBytes(bytes);\n\t\t\t\toutMsg = bytesMsg;\n\t\t\t}\n\t\t} else {\n\t\t\toutMsg = sess.createTextMessage(data);\n\t\t}\n\n\t\tMessageProducer mp = sess.createProducer(createDestination(cmdLine\n\t\t\t\t.getArgs()[0]));\n\t\tif (cmdLine.hasOption(\"n\")) {\n\t\t\tmp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n\t\t}\n\n\t\t// enrich headers.\n\t\tfor (Entry<Object, Object> p : props.entrySet()) {\n\t\t\toutMsg.setObjectProperty((String) p.getKey(), p.getValue());\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : intProps.entrySet()) {\n\t\t\toutMsg.setIntProperty((String) p.getKey(), Integer.parseInt((String)p.getValue()));\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : longProps.entrySet()) {\n\t\t\toutMsg.setLongProperty((String) p.getKey(), Long.parseLong((String)p.getValue()));\n\t\t}\n\n\t\tif (cmdLine.hasOption(\"r\")) {\n\t\t\toutMsg.setJMSReplyTo(createDestination(cmdLine.getOptionValue(\"r\")));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_CORRELATION_ID)) {\n\t\t\toutMsg.setJMSCorrelationID(cmdLine.getOptionValue(CMD_CORRELATION_ID));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_PRIORITY)) {\n\t\t\ttry {\n\t\t\t\tint priority = Integer.parseInt(cmdLine\n\t\t\t\t\t\t.getOptionValue(CMD_PRIORITY));\n\t\t\t\tmp.setPriority(priority);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\t\"JMSPriority has to be an integer value\");\n\t\t\t}\n\t\t}\n\n\t\t// send multiple messages?\n\t\tif (cmdLine.hasOption(\"c\")) {\n\t\t\tint count = Integer.parseInt(cmdLine.getOptionValue(\"c\"));\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\tmp.send(outMsg);\n\t\t\t}\n\t\t\toutput(\"\", count, \" messages sent\");\n\t\t} else {\n\t\t\tmp.send(outMsg);\n\t\t\toutput(\"Message sent\");\n\t\t}\n\t}\n","Method after Refactoring":"\tprotected void executePut(final CommandLine cmdLine) throws IOException, JMSException{\n\t\tString data = cmdLine.getOptionValue(CMD_PUT);\n\t\tputData(data, cmdLine);\n\t\tif( data.startsWith(\"@\")){\n\t\t\toutput(\"File: \" + data.substring(1) + \" sent\");\n\t\t} else {\n\t\t\toutput(\"Message sent\");\n\t\t}\n\t}\n","Extracted Method":"\tprotected void putData(final String data, final CommandLine cmdLine) throws IOException,\n\t\t\tJMSException {\n\t\t// Check if we have properties to put\n\t\tProperties props = cmdLine.getOptionProperties(CMD_SET_HEADER);\n\t\tProperties intProps = cmdLine.getOptionProperties(CMD_SET_INT_HEADER);\n\t\tProperties longProps = cmdLine.getOptionProperties(CMD_SET_LONG_HEADER);\n\n\t\tString type = cmdLine.getOptionValue(CMD_TYPE, DEFAULT_TYPE);\n\t\tString encoding = cmdLine.getOptionValue(CMD_ENCODING, Charset\n\t\t\t\t.defaultCharset().name());\n\n\t\tMessage outMsg = null;\n\t\t// figure out input data\n\t\tif (data.startsWith(\"@\")) {\n\t\t\t\n\t\t\t// Load file.\n\t\t\tbyte[] bytes = FileUtils.readFileToByteArray(new File(data\n\t\t\t\t\t.substring(1)));\n\t\t\tif (type.equals(TYPE_TEXT)) {\n\t\t\t\toutMsg = sess.createTextMessage(new String(bytes, encoding));\n\t\t\t} else {\n\t\t\t\tBytesMessage bytesMsg = sess.createBytesMessage();\n\t\t\t\tbytesMsg.writeBytes(bytes);\n\t\t\t\toutMsg = bytesMsg;\n\t\t\t}\n\t\t} else {\n\t\t\toutMsg = sess.createTextMessage(data);\n\t\t}\n\n\t\tMessageProducer mp = sess.createProducer(createDestination(cmdLine\n\t\t\t\t.getArgs()[0]));\n\t\tif (cmdLine.hasOption(\"n\")) {\n\t\t\tmp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);\n\t\t}\n\n\t\t// enrich headers.\n\t\tfor (Entry<Object, Object> p : props.entrySet()) {\n\t\t\toutMsg.setObjectProperty((String) p.getKey(), p.getValue());\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : intProps.entrySet()) {\n\t\t\toutMsg.setIntProperty((String) p.getKey(), Integer.parseInt((String)p.getValue()));\n\t\t}\n\n\t\tfor (Entry<Object, Object> p : longProps.entrySet()) {\n\t\t\toutMsg.setLongProperty((String) p.getKey(), Long.parseLong((String)p.getValue()));\n\t\t}\n\n\t\tif (cmdLine.hasOption(\"r\")) {\n\t\t\toutMsg.setJMSReplyTo(createDestination(cmdLine.getOptionValue(\"r\")));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_CORRELATION_ID)) {\n\t\t\toutMsg.setJMSCorrelationID(cmdLine.getOptionValue(CMD_CORRELATION_ID));\n\t\t}\n\n\t\tif (cmdLine.hasOption(CMD_PRIORITY)) {\n\t\t\ttry {\n\t\t\t\tint priority = Integer.parseInt(cmdLine\n\t\t\t\t\t\t.getOptionValue(CMD_PRIORITY));\n\t\t\t\tmp.setPriority(priority);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\t\"JMSPriority has to be an integer value\");\n\t\t\t}\n\t\t}\n\n\t\t// send multiple messages?\n\t\tif (cmdLine.hasOption(\"c\")) {\n\t\t\tint count = Integer.parseInt(cmdLine.getOptionValue(\"c\"));\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\tmp.send(outMsg);\n\t\t\t}\n\t\t\toutput(\"\", count, \" messages sent\");\n\t\t} else {\n\t\t\tmp.send(outMsg);\n\t\t}\n\t}\n"}
